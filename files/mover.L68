00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 21/10/2022 12:51:38

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Tester
00000000                             3  * Written by : Gabor Major
00000000                             4  * Date       : 2022.10.13
00000000                             5  * Description: Moving square around using wasd
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ; $100 is used as temp variable storage
00000000                             9  
00000000  =0000000A                 10  PLAYER_SIZE     EQU     10  ; stores player size
00000000  =00000005                 11  MARKER_SIZE     EQU     5   ; stores marker size
00000000  =0000000A                 12  OBJECTS_SIZE    EQU     10  ; stores the objects size
00000000  =00000020                 13  NUMBER_OF_OBJECTS   EQU 32  ; stores the number of max objects
00000000  =00000008                 14  NUMBER_OF_BOXES EQU     8   ; stores the number of x and y boxes
00000000  =00000014                 15  SHIELD_SIZE     EQU     20  stores the shield around the player size
00000000                            16  
00001000                            17  START   ORG    $1000
00001000                            18          
00001000                            19          ; turn off input echo
00001000  303C 000C                 20          MOVE.W  #12,D0
00001004  323C 0000                 21          MOVE.W  #0,D1
00001008  4E4F                      22          TRAP    #15
0000100A                            23          
0000100A                            24          ; turn on double buffering
0000100A                            25          ; avoids flickering
0000100A  705C                      26          MOVE.L      #92,D0
0000100C  7211                      27          MOVE.L      #17,D1
0000100E  4E4F                      28          TRAP        #15
00001010                            29  
00001010                            30          ; store time in variable
00001010  303C 0008                 31          MOVE.W  #8,D0
00001014  4E4F                      32          TRAP    #15
00001016  23C1 000018DC             33          MOVE.L  D1,last_frame_time
0000101C  23C1 000018E0             34          MOVE.L  D1,last_movement_time
00001022  23C1 000018E4             35          MOVE.L  D1,last_goal_change_time
00001028  23C1 000018E8             36          MOVE.L  D1,last_object_time
0000102E  23C1 000018EC             37          MOVE.L  D1,last_note_spawn_time
00001034                            38          ; stores the time as starting seed
00001034  23C1 00001908             39          MOVE.L  D1,random_value
0000103A                            40  
0000103A                            41          ; saves the screen size
0000103A  4281                      42          CLR.L   D1
0000103C  303C 0021                 43          MOVE.W  #33,D0
00001040  4E4F                      44          TRAP    #15
00001042  41F9 000018F0             45          LEA     screen_dimensions,A0
00001048  33C1 000018F2             46          MOVE.W  D1,screen_dimensions+2
0000104E  4841                      47          SWAP    D1
00001050  33C1 000018F0             48          MOVE.W  D1,screen_dimensions
00001056                            49  
00001056                            50          ; sets player position to center
00001056  3401                      51          MOVE.W  D1,D2
00001058  363C 0002                 52          MOVE.W  #2,D3
0000105C  6100 0868                 53          BSR     DIVIDE_NUMBER
00001060  33C2 000018F4             54          MOVE.W  D2,player_1_position
00001066                            55          
00001066  4841                      56          SWAP    D1
00001068  3401                      57          MOVE.W  D1,D2
0000106A  6100 085A                 58          BSR     DIVIDE_NUMBER
0000106E  33C2 000018F6             59          MOVE.W  D2,player_1_position+2
00001074                            60  
00001074                            61          ; saves the grid marker positions
00001074                            62          ; depending on screen size
00001074  6100 003C                 63          BSR     CALCULATE_GRID
00001078                            64  
00001078  23FC 66696C65 00001A52    65          MOVE.L  #'file',song_file_name
00001082  23FC 2E62696E 00001A56    66          MOVE.L  #'.bin',song_file_name+4
0000108C  33FC 6172 00001A5A        67          MOVE.W  #'ar',song_file_name+8
00001094  13FC 0079 00001A5C        68          MOVE.B  #'y',song_file_name+10
0000109C  13FC 0000 00001A5D        69          MOVE.B  #0,song_file_name+11
000010A4                            70          ; loads in the music from the file
000010A4  6100 009A                 71          BSR     LOAD_DATA
000010A8                            72          
000010A8                            73          ; initialises a goal point
000010A8                            74          ; FIX THIS LATER SO THAT THE NOTES DON'T SPAWN EARLY
000010A8  6100 07DC                 75          BSR     GET_NEW_GOAL_POINT
000010AC                            76  
000010AC                            77  
000010AC  4EF9 00001162             78          JMP     LOOP
000010B2                            79  
000010B2                            80  
000010B2                            81  CALCULATE_GRID
000010B2                            82          ; stores x,y space sizes
000010B2  3439 000018F0             83          MOVE.W  screen_dimensions,D2
000010B8  363C 000B                 84          MOVE.W  #NUMBER_OF_BOXES+3,D3
000010BC  6100 0808                 85          BSR     DIVIDE_NUMBER
000010C0  31C2 0100                 86          MOVE.W  D2,$100
000010C4                            87  
000010C4  4282                      88          CLR.L   D2
000010C6  343C 0005                 89          MOVE.W  #MARKER_SIZE,D2
000010CA  363C 0002                 90          MOVE.W  #2,D3
000010CE  6100 07F6                 91          BSR     DIVIDE_NUMBER
000010D2                            92          
000010D2                            93          ; loops over x and y
000010D2                            94          FOR D5 = #2 TO #NUMBER_OF_BOXES+1  DO
000010DA  3605                      95              MOVE.W  D5,D3
000010DC  C6F8 0100                 96              MULU    $100,D3
000010E0  9642                      97              SUB.W   D2,D3             ; take HALF marker size
000010E2  41F9 00001910             98              LEA     grid_x_positions,A0
000010E8  D1C5                      99              ADD.L   D5,A0
000010EA  D1C5                     100              ADD.L   D5,A0
000010EC  5988                     101              SUB.L   #4,A0
000010EE  3083                     102              MOVE.W  D3,(A0)
000010F0                           103          ENDF
000010F8                           104          
000010F8  3439 000018F2            105          MOVE.W  screen_dimensions+2,D2
000010FE  363C 000B                106          MOVE.W  #NUMBER_OF_BOXES+3,D3
00001102  6100 07C2                107          BSR     DIVIDE_NUMBER
00001106  31C2 0100                108          MOVE.W  D2,$100
0000110A                           109  
0000110A  4282                     110          CLR.L   D2
0000110C  343C 0005                111          MOVE.W  #MARKER_SIZE,D2
00001110  363C 0002                112          MOVE.W  #2,D3
00001114  6100 07B0                113          BSR     DIVIDE_NUMBER
00001118                           114          
00001118                           115          FOR D5 = #2 TO #NUMBER_OF_BOXES+1  DO
00001120  3605                     116              MOVE.W  D5,D3
00001122  C6F8 0100                117              MULU    $100,D3
00001126  9642                     118              SUB.W   D2,D3
00001128  41F9 00001920            119              LEA     grid_y_positions,A0
0000112E  D1C5                     120              ADD.L   D5,A0
00001130  D1C5                     121              ADD.L   D5,A0
00001132  5988                     122              SUB.L   #4,A0
00001134  3083                     123              MOVE.W  D3,(A0)
00001136                           124          ENDF
0000113E                           125  
0000113E  4E75                     126          RTS
00001140                           127  
00001140                           128  
00001140                           129  LOAD_DATA
00001140                           130          ; open the file
00001140  103C 0033                131          MOVE.B  #51,D0
00001144  43F9 00001A52            132          LEA     song_file_name,A1
0000114A  4E4F                     133          TRAP    #15
0000114C                           134  
0000114C                           135          ; load the file contents into memory
0000114C  103C 0035                136          MOVE.B  #53,D0
00001150  43F9 00003000            137          LEA     SONG_FILE_CONTENTS,A1
00001156  7440                     138          MOVE.L  #64,D2
00001158  4E4F                     139          TRAP    #15
0000115A                           140  
0000115A                           141          ; close all files
0000115A  103C 0032                142          MOVE.B  #50,D0
0000115E  4E4F                     143          TRAP    #15
00001160                           144  
00001160  4E75                     145          RTS
00001162                           146  
00001162                           147  LOOP
00001162                           148          ; frame delay, so that framerate is consistent
00001162  6100 00A6                149          BSR     FRAME_DELAY
00001166                           150          
00001166                           151  
00001166                           152          ; moves the enemies and notes
00001166  303C 0008                153          MOVE.W  #8,D0
0000116A  4E4F                     154          TRAP    #15
0000116C  92B9 000018E8            155          SUB.L   last_object_time,D1
00001172                           156          IF.L #20 <LE> D1    THEN
0000117C  6100 03BA                157              BSR     MOVE_OBJECTS
00001180  303C 0008                158              MOVE.W  #8,D0
00001184  4E4F                     159              TRAP    #15
00001186  23C1 000018E8            160              MOVE.L  D1,last_object_time
0000118C                           161          ENDI
0000118C                           162  
0000118C                           163          
0000118C                           164          ; input + change position
0000118C  303C 0008                165          MOVE.W  #8,D0
00001190  4E4F                     166          TRAP    #15
00001192  92B9 000018E0            167          SUB.L   last_movement_time,D1
00001198                           168          IF.L #4 <LE> D1    THEN
000011A2  6100 0088                169              BSR     HANDLE_INPUT
000011A6  303C 0008                170              MOVE.W  #8,D0
000011AA  4E4F                     171              TRAP    #15
000011AC  23C1 000018E0            172              MOVE.L  D1,last_movement_time
000011B2                           173          ENDI
000011B2                           174  
000011B2                           175          ; collision check
000011B2  6100 046A                176          BSR     CHECK_OBJECT_COLLISIONS
000011B6                           177  
000011B6                           178          ; new goal point
000011B6  303C 0008                179          MOVE.W  #8,D0
000011BA  4E4F                     180          TRAP    #15
000011BC  92B9 000018E4            181          SUB.L   last_goal_change_time,D1
000011C2                           182          IF.L #500 <LE> D1    THEN
000011CC  6100 06B8                183              BSR     GET_NEW_GOAL_POINT
000011D0  303C 0008                184              MOVE.W  #8,D0
000011D4  4E4F                     185              TRAP    #15
000011D6  23C1 000018E4            186              MOVE.L  D1,last_goal_change_time
000011DC                           187          ENDI
000011DC                           188  
000011DC                           189          ; spawn new objects
000011DC  303C 0008                190          MOVE.W  #8,D0
000011E0  4E4F                     191          TRAP    #15
000011E2  92B9 000018EC            192          SUB.L   last_note_spawn_time,D1
000011E8                           193          IF.L #50 <LE> D1    THEN
000011F2  6100 01EE                194              BSR     SPAWN_NEW_OBJECT
000011F6  303C 0008                195              MOVE.W  #8,D0
000011FA  4E4F                     196              TRAP    #15
000011FC  23C1 000018EC            197              MOVE.L  D1,last_note_spawn_time
00001202                           198          ENDI
00001202                           199  
00001202                           200          ; render screen
00001202  6100 04E2                201          BSR     RENDER_SCREEN
00001206                           202                  
00001206                           203  
00001206  4EF8 1162                204          JMP     LOOP
0000120A                           205  
0000120A                           206  
0000120A                           207  FRAME_DELAY
0000120A  303C 0008                208          MOVE.W  #8,D0       ; gets the time
0000120E  4E4F                     209          TRAP    #15
00001210                           210  
00001210  92B9 000018DC            211          SUB.L   last_frame_time,D1  ; subtracts the two times
00001216  B2BC 00000002            212          CMP.L   #2,D1               ; n number of centiseconds have passed
0000121C  65EC                     213          BLO     frame_delay
0000121E                           214  
0000121E  303C 0008                215          MOVE.W  #8,D0               ; save time
00001222  4E4F                     216          TRAP    #15
00001224  23C1 000018DC            217          MOVE.L  D1,last_frame_time
0000122A                           218  
0000122A  4E75                     219          RTS
0000122C                           220  
0000122C                           221  
0000122C                           222  HANDLE_INPUT
0000122C  303C 0013                223          MOVE.W  #19,D0
00001230  2239 00001900            224          MOVE.L  player_1_colour_keymaps,D1
00001236  4E4F                     225          TRAP    #15
00001238                           226          
00001238                           227          IF.L #0 <NE> D1 THEN
00001242                           228              ; CHANGE COLOURS
00001242  0801 0018                229              BTST.L  #24,D1
00001246                           230              IF  <NE>    THEN
0000124A  23FC 000000FF 000018FC   231                  MOVE.L  #RED,player_1_shield_colour
00001254                           232              ENDI
00001254  0801 0010                233              BTST.L  #16,D1
00001258                           234              IF  <NE>    THEN
0000125C  23FC 0000FF00 000018FC   235                  MOVE.L  #LIME,player_1_shield_colour
00001266                           236              ENDI
00001266  0801 0008                237              BTST.L  #8,D1
0000126A                           238              IF  <NE>    THEN
0000126E  23FC 0000FFFF 000018FC   239                  MOVE.L  #YELLOW,player_1_shield_colour
00001278                           240              ENDI
00001278  0801 0000                241              BTST.L  #0,D1
0000127C                           242              IF  <NE>    THEN
00001280  23FC 00FF0000 000018FC   243                  MOVE.L  #BLUE,player_1_shield_colour
0000128A                           244              ENDI
0000128A                           245          ELSE
0000128E  303C 0013                246              MOVE.W  #19,D0
00001292  2239 00001904            247              MOVE.L  player_1_colour_keymaps+4,D1
00001298  4E4F                     248              TRAP    #15
0000129A                           249              IF.L #0 <NE> D1 THEN
000012A4                           250                  ; CHANGE COLOURS ELECTRIC BOOGALOO
000012A4  0801 0018                251                  BTST.L  #24,D1
000012A8                           252                  IF  <NE>    THEN
000012AC  23FC 00FF00FF 000018FC   253                      MOVE.L  #FUCHSIA,player_1_shield_colour
000012B6                           254                  ENDI
000012B6  0801 0010                255                  BTST.L  #16,D1
000012BA                           256                  IF  <NE>    THEN
000012BE  23FC 00FFFF00 000018FC   257                      MOVE.L  #AQUA,player_1_shield_colour
000012C8                           258                  ENDI
000012C8  0801 0008                259                  BTST.L  #8,D1
000012CC                           260                  IF  <NE>    THEN
000012D0  23FC 00FFFFFF 000018FC   261                      MOVE.L  #WHITE,player_1_shield_colour
000012DA                           262                  ENDI
000012DA                           263              ENDI
000012DA                           264          ENDI
000012DA                           265          
000012DA                           266  
000012DA  6100 0004                267          BSR     HANDLE_MOVEMENT
000012DE                           268          
000012DE  4E75                     269          RTS
000012E0                           270  
000012E0                           271  
000012E0                           272  HANDLE_MOVEMENT
000012E0  303C 0013                273          MOVE.W  #19,D0
000012E4  2239 000018F8            274          MOVE.L  player_1_keymaps,D1  ; check for these keys
000012EA  4E4F                     275          TRAP    #15
000012EC                           276  
000012EC                           277          IF.L #0 <EQ> D1 THEN    ; checks if any key is pressed
000012F6  4E75                     278              RTS
000012F8                           279          ENDI
000012F8  4286                     280          CLR.L   D6
000012FA  4287                     281          CLR.L   D7
000012FC                           282  
000012FC  0801 0018                283          BTST.L  #24,D1      ; checks w
00001300                           284          IF  <NE>    THEN
00001304  0647 FFF9                285              ADD.W   #-7,D7
00001308  0801 0008                286              BTST.L  #8,D1       ; checks if going diagonally and changes distance to 7
0000130C                           287              IF  <NE>    THEN
00001310  5447                     288                  ADD.W   #2,D7
00001312  0801 0000                289                  BTST.L  #0,D1
00001316                           290                  IF  <NE>    THEN
0000131A  0647 FFFE                291                      ADD.W   #-2,D7
0000131E                           292                  ENDI
0000131E                           293  
0000131E                           294              ELSE
00001322  0801 0000                295                  BTST.L  #0,D1
00001326                           296                  IF  <NE>    THEN
0000132A  5447                     297                      ADD.W   #2,D7
0000132C                           298                  ENDI
0000132C                           299              ENDI
0000132C                           300          ENDI
0000132C  0801 0010                301          BTST.L  #16,D1      ; checks s
00001330                           302          IF  <NE>    THEN
00001334  5E47                     303              ADD.W   #7,D7
00001336  0801 0008                304              BTST.L  #8,D1
0000133A                           305              IF  <NE>    THEN
0000133E  0647 FFFE                306                  ADD.W   #-2,D7
00001342  0801 0000                307                  BTST.L  #0,D1
00001346                           308                  IF  <NE>    THEN
0000134A  5447                     309                      ADD.W   #2,D7
0000134C                           310                  ENDI
0000134C                           311  
0000134C                           312              ELSE
00001350  0801 0000                313                  BTST.L  #0,D1
00001354                           314                  IF  <NE>    THEN
00001358  0647 FFFE                315                      ADD.W   #-2,D7
0000135C                           316                  ENDI
0000135C                           317              ENDI
0000135C                           318          ENDI
0000135C  0801 0008                319          BTST.L  #8,D1       ; checks a
00001360                           320          IF  <NE>    THEN
00001364  0646 FFF9                321              ADD.W   #-7,D6
00001368  0801 0018                322              BTST.L  #24,D1
0000136C                           323              IF  <NE>    THEN
00001370  5446                     324                  ADD.W   #2,D6
00001372  0801 0010                325                  BTST.L  #16,D1
00001376                           326                  IF  <NE>    THEN
0000137A  0646 FFFE                327                      ADD.W   #-2,D6
0000137E                           328                  ENDI
0000137E                           329  
0000137E                           330              ELSE
00001382  0801 0010                331                  BTST.L  #16,D1
00001386                           332                  IF  <NE>    THEN
0000138A  5446                     333                      ADD.W   #2,D6
0000138C                           334                  ENDI
0000138C                           335              ENDI
0000138C                           336  
0000138C                           337          ENDI
0000138C  0801 0000                338          BTST.L  #0,D1       ; checks d
00001390                           339          IF  <NE>    THEN
00001394  5E46                     340              ADD.W   #7,D6
00001396  0801 0018                341              BTST.L  #24,D1
0000139A                           342              IF  <NE>    THEN
0000139E  0646 FFFE                343                  ADD.W   #-2,D6
000013A2  0801 0010                344                  BTST.L  #16,D1
000013A6                           345                  IF  <NE>    THEN
000013AA  5446                     346                      ADD.W   #2,D6
000013AC                           347                  ENDI
000013AC                           348  
000013AC                           349              ELSE
000013B0  0801 0010                350                  BTST.L  #16,D1
000013B4                           351                  IF  <NE>    THEN
000013B8  0646 FFFE                352                      ADD.W   #-2,D6
000013BC                           353                  ENDI
000013BC                           354              ENDI
000013BC                           355          ENDI
000013BC                           356  
000013BC  303C 0013                357          MOVE.W  #19,D0
000013C0  7210                     358          MOVE.L  #$10,D1     ; checks for shift pressed
000013C2  4E4F                     359          TRAP    #15
000013C4                           360  
000013C4  0801 0000                361          BTST.L  #0,D1
000013C8                           362          IF  <NE>    THEN
000013CC  DC46                     363              ADD.W   D6,D6 ; adds the number to itself, i.e. multiply x2
000013CE  DE47                     364              ADD.W   D7,D7
000013D0                           365          ENDI
000013D0                           366  
000013D0  43F9 000018F4            367          LEA     player_1_position,A1   ; refernce player variable
000013D6  DD59                     368          ADD.W   D6,(A1)+    ; add offset to position
000013D8  DF51                     369          ADD.W   D7,(A1)
000013DA  5549                     370          SUB.W   #2,A1
000013DC                           371          
000013DC  6100 01FA                372          BSR     CHECK_OUT_OF_BOUNDS
000013E0                           373  
000013E0  4E75                     374          RTS
000013E2                           375  
000013E2                           376  
000013E2                           377  SPAWN_NEW_OBJECT
000013E2  41F9 000019B0            378          LEA     notes_directions,A0
000013E8  43F9 000019D0            379          LEA     notes_colours,A1
000013EE  45F9 00001930            380          LEA     notes_x_positions,A2
000013F4  47F9 00001970            381          LEA     notes_y_positions,A3
000013FA  49F9 00001910            382          LEA     grid_x_positions,A4
00001400  4BF9 00001920            383          LEA     grid_y_positions,A5
00001406  D8F9 0000190C            384          ADD.W   goal_index,A4
0000140C  D8F9 0000190C            385          ADD.W   goal_index,A4
00001412  DAF9 0000190E            386          ADD.W   goal_index+2,A5
00001418  DAF9 0000190E            387          ADD.W   goal_index+2,A5
0000141E                           388          ; NUMBER_OF_OBJECTS-1
0000141E                           389          FOR D5 = #0 TO #1   DO
00001426                           390              IF.B (A0) <EQ> #$FF  THEN
0000142E                           391                  ; set the colour
0000142E                           392                  ; NEED COLOUR FROM FILE
0000142E  363C 0007                393                  MOVE.W  #7,D3
00001432  6100 046C                394                  BSR     GET_RANDOM_VALUE
00001436                           395                  IF.W D2 <EQ> #0 THEN
0000143E  22BC 000000FF            396                      MOVE.L  #RED,(A1)
00001444                           397                  ENDI
00001444                           398                  IF.W D2 <EQ> #1 THEN
0000144C  22BC 0000FF00            399                      MOVE.L  #LIME,(A1)
00001452                           400                  ENDI
00001452                           401                  IF.W D2 <EQ> #2 THEN
0000145A  22BC 0000FFFF            402                      MOVE.L  #YELLOW,(A1)
00001460                           403                  ENDI
00001460                           404                  IF.W D2 <EQ> #3 THEN
00001468  22BC 00FF0000            405                      MOVE.L  #BLUE,(A1)
0000146E                           406                  ENDI
0000146E                           407                  IF.W D2 <EQ> #4 THEN
00001476  22BC 00FF00FF            408                      MOVE.L  #FUCHSIA,(A1)
0000147C                           409                  ENDI
0000147C                           410                  IF.W D2 <EQ> #5 THEN
00001484  22BC 00FFFF00            411                      MOVE.L  #AQUA,(A1)
0000148A                           412                  ENDI
0000148A                           413                  IF.W D2 <EQ> #6 THEN
00001492  22BC 00FFFFFF            414                      MOVE.L  #WHITE,(A1)
00001498                           415                  ENDI
00001498                           416  
00001498                           417                  ; set the orientation and speed
00001498                           418                  ;get speed
00001498  363C 0002                419                  MOVE.W  #2,D3
0000149C  6100 0402                420                  BSR     GET_RANDOM_VALUE
000014A0                           421                  IF.B D2 <EQ> #0 THEN
000014A8                           422                      IF.W goal_index <GT> #3 THEN
000014B4  5402                     423                          ADD.B   #%10,D2
000014B6                           424                      ENDI
000014B6                           425                  ELSE
000014BA                           426                      IF.W goal_index+2 <GT> #3   THEN
000014C6  5402                     427                          ADD.B   #%10,D2
000014C8                           428                      ENDI
000014C8                           429                  ENDI
000014C8  1082                     430                  MOVE.B  D2,(A0)
000014CA                           431                  
000014CA                           432                  ; set the positions
000014CA  3494                     433                  MOVE.W  (A4),(A2)
000014CC  3695                     434                  MOVE.W  (A5),(A3)
000014CE                           435                  ; random offset
000014CE  363C 0010                436                  MOVE.W  #16,D3
000014D2  6100 03CC                437                  BSR     GET_RANDOM_VALUE
000014D6                           438                  IF.B (A0) <EQ> #0   THEN
000014DE  34B9 000018F0            439                      MOVE.W  screen_dimensions,(A2)
000014E4  0453 000D                440                      SUB.W   #13,(A3)
000014E8  D553                     441                      ADD.W   D2,(A3)
000014EA                           442                  ENDI
000014EA                           443                  IF.B (A0) <EQ> #1   THEN
000014F2  36B9 000018F2            444                      MOVE.W  screen_dimensions+2,(A3)
000014F8  0452 000D                445                      SUB.W   #13,(A2)
000014FC  D552                     446                      ADD.W   D2,(A2)
000014FE                           447                  ENDI
000014FE                           448                  IF.B (A0) <EQ> #2    THEN
00001506  34BC FFF6                449                      MOVE.W  #-OBJECTS_SIZE,(A2)
0000150A  0453 000D                450                      SUB.W   #13,(A3)
0000150E  D553                     451                      ADD.W   D2,(A3)
00001510                           452                  ENDI
00001510                           453                  IF.B (A0) <EQ> #3    THEN
00001518  36BC FFF6                454                      MOVE.W  #-OBJECTS_SIZE,(A3)
0000151C  0452 000D                455                      SUB.W   #13,(A2)
00001520  D552                     456                      ADD.W   D2,(A2)
00001522                           457                  ENDI
00001522                           458  
00001522  4E75                     459                  RTS
00001524                           460              ENDI
00001524  5248                     461              ADD.W   #$1,A0
00001526  5849                     462              ADD.W   #$4,A1
00001528  544A                     463              ADD.W   #$2,A2
0000152A  544B                     464              ADD.W   #$2,A3
0000152C                           465          ENDF
00001536                           466          
00001536  4E75                     467          RTS
00001538                           468  
00001538                           469  
00001538                           470  MOVE_OBJECTS
00001538  41F9 000019B0            471          LEA     notes_directions,A0
0000153E  43F9 00001930            472          LEA     notes_x_positions,A1
00001544  45F9 00001970            473          LEA     notes_y_positions,A2
0000154A                           474          FOR D5 = #0 TO #NUMBER_OF_OBJECTS-1 DO
00001552                           475              IF.B (A0) <NE> #$FF THEN
0000155A                           476                  IF.B (A0) <EQ> #0   THEN
00001562  5B51                     477                      SUB.W   #5,(A1)
00001564                           478                  ENDI
00001564                           479                  IF.B (A0) <EQ> #1   THEN
0000156C  5B52                     480                      SUB.W   #5,(A2)
0000156E                           481                  ENDI
0000156E                           482                  IF.B (A0) <EQ> #2   THEN
00001576  5A51                     483                      ADD.W   #5,(A1)
00001578                           484                  ENDI
00001578                           485                  IF.B (A0) <EQ> #3   THEN
00001580  5A52                     486                      ADD.W   #5,(A2)
00001582                           487                  ENDI
00001582  6100 0012                488                  BSR     OBJECT_OUT_OF_BOUNDS
00001586                           489              ENDI
00001586  5248                     490              ADD.W   #$1,A0
00001588  5449                     491              ADD.W   #$2,A1
0000158A  544A                     492              ADD.W   #$2,A2
0000158C                           493          ENDF
00001594                           494          
00001594  4E75                     495          RTS
00001596                           496  
00001596                           497  ; data to be checked in A0, A1, A2
00001596                           498  ; uses D1
00001596                           499  OBJECT_OUT_OF_BOUNDS
00001596                           500          ; check if out of bounds top left
00001596                           501          IF.W (A1) <LT> #-OBJECTS_SIZE   THEN
0000159E  10BC 00FF                502              MOVE.B  #$FF,(A0)   ; deletes data in A0 in notes_directions unreferencing the other data
000015A2  4E75                     503              RTS
000015A4                           504          ENDI
000015A4                           505          IF.W (A2) <LT> #-OBJECTS_SIZE   THEN
000015AC  10BC 00FF                506              MOVE.B  #$FF,(A0)
000015B0  4E75                     507              RTS
000015B2                           508          ENDI
000015B2                           509  
000015B2                           510          ; check out of bounds bottom right
000015B2  3239 000018F0            511          MOVE.W  screen_dimensions,D1
000015B8                           512          IF.W (A1) <GT> D1   THEN
000015BE  10BC 00FF                513              MOVE.B  #$FF,(A0)
000015C2  4E75                     514              RTS
000015C4                           515          ENDI
000015C4  3239 000018F2            516          MOVE.W  screen_dimensions+2,D1
000015CA                           517          IF.W (A2) <GT> D1  THEN
000015D0  10BC 00FF                518              MOVE.B  #$FF,(A0)
000015D4  4E75                     519              RTS
000015D6                           520          ENDI
000015D6                           521  
000015D6  4E75                     522          RTS
000015D8                           523  
000015D8                           524  ; uses D2,D3, A1
000015D8                           525  ; data to be checked in A1
000015D8                           526  CHECK_OUT_OF_BOUNDS
000015D8                           527          ; check if out of bounds top left
000015D8                           528          IF.W (A1) <LT> #5     THEN
000015E0  32BC 0005                529              MOVE.W  #5,(A1)
000015E4                           530          ENDI
000015E4  5449                     531          ADD.W   #2,A1
000015E6                           532          IF.W (A1) <LT> #5    THEN
000015EE  32BC 0005                533              MOVE.W  #5,(A1)
000015F2                           534          ENDI
000015F2                           535  
000015F2                           536          ; check out of bounds bottom right
000015F2  3439 000018F0            537          MOVE.W  screen_dimensions,D2
000015F8  3639 000018F2            538          MOVE.W  screen_dimensions+2,D3
000015FE                           539          
000015FE  0442 000A                540          SUB.W   #PLAYER_SIZE,D2
00001602  0443 000A                541          SUB.W   #PLAYER_SIZE,D3
00001606                           542  
00001606  5B42                     543          SUB.W   #5,D2
00001608  5B43                     544          SUB.W   #5,D3
0000160A                           545  
0000160A                           546          IF.W D2 <LT> -(A1) THEN
00001610  3282                     547              MOVE.W  D2,(A1)
00001612                           548          ENDI
00001612  5449                     549          ADD.W   #2,A1
00001614                           550          IF.W D3 <LT> (A1) THEN
0000161A  3283                     551              MOVE.W  D3,(A1)
0000161C                           552          ENDI
0000161C                           553  
0000161C  4E75                     554          RTS
0000161E                           555  
0000161E                           556  ; USES D0 -> D5
0000161E                           557  ; uses A0, A1, A2, A3
0000161E                           558  CHECK_OBJECT_COLLISIONS
0000161E  3039 000018F4            559          MOVE.W  player_1_position,D0
00001624  3239 000018F6            560          MOVE.W  player_1_position+2,D1
0000162A  5B40                     561          SUB.W   #5,D0
0000162C  5B41                     562          SUB.W   #5,D1
0000162E  3400                     563          MOVE.W  D0,D2
00001630  3601                     564          MOVE.W  D1,D3
00001632  0642 0014                565          ADD.W   #SHIELD_SIZE,D2
00001636  0643 0014                566          ADD.W   #SHIELD_SIZE,D3
0000163A                           567          
0000163A  41F9 00001930            568          LEA     notes_x_positions,A0
00001640  43F9 00001970            569          LEA     notes_y_positions,A1
00001646  45F9 000019D0            570          LEA     notes_colours,A2
0000164C  47F9 000019B0            571          LEA     notes_directions,A3
00001652                           572          FOR D6 = #0 TO #NUMBER_OF_OBJECTS-1 DO
0000165A                           573              IF.B (A3) <NE> #$FF THEN
00001662  3810                     574                  MOVE.W  (A0),D4
00001664  3A04                     575                  MOVE.W  D4,D5
00001666  0645 000A                576                  ADD.W   #OBJECTS_SIZE,D5
0000166A                           577  
0000166A                           578                  IF.W D4 <GE> D0 AND.W D4 <LE> D2    THEN
00001676  6100 0028                579                      BSR     CHECK_Y
0000167A                           580                  ELSE
0000167E                           581                      IF.W D5 <GE> D0 AND.W D5 <LE> D2    THEN
0000168A  6100 0014                582                          BSR     CHECK_Y
0000168E                           583                      ENDI
0000168E                           584                  ENDI
0000168E                           585              ENDI
0000168E                           586              
0000168E  5448                     587              ADD.W   #$2,A0
00001690  5449                     588              ADD.W   #$2,A1
00001692  584A                     589              ADD.W   #$4,A2
00001694  524B                     590              ADD.W   #$1,A3
00001696                           591          ENDF
0000169E                           592  
0000169E  4E75                     593          RTS
000016A0                           594  
000016A0                           595  
000016A0                           596  CHECK_Y
000016A0  3811                     597          MOVE.W  (A1),D4
000016A2  3A04                     598          MOVE.W  D4,D5
000016A4  0645 000A                599          ADD.W   #OBJECTS_SIZE,D5
000016A8                           600          IF.W D4 <GE> D1 AND.W D4 <LE> D3    THEN
000016B4  16BC 00FF                601              MOVE.B  #$FF,(A3)
000016B8                           602              IF.L A2 <EQ> player_1_shield_colour THEN
000016C2  4E71                     603                  NOP
000016C4                           604              ENDI
000016C4                           605          ELSE
000016C8                           606              IF.W D5 <GE> D1 AND.W D5 <LE> D3    THEN
000016D4  16BC 00FF                607                  MOVE.B  #$FF,(A3)
000016D8                           608                  IF.L A2 <EQ> player_1_shield_colour THEN
000016E2  4E71                     609                      NOP
000016E4                           610                  ENDI
000016E4                           611              ENDI
000016E4                           612          ENDI
000016E4                           613          
000016E4  4E75                     614          RTS
000016E6                           615  
000016E6                           616  
000016E6                           617  RENDER_SCREEN
000016E6  6100 001A                618          BSR     DRAW_BACKGROUND
000016EA  6100 00C0                619          BSR     DRAW_OBJECTS
000016EE  6100 011A                620          BSR     DRAW_PLAYER_1
000016F2                           621          
000016F2  705E                     622          MOVE.L  #94,D0      ; repaints screen
000016F4  4E4F                     623          TRAP    #15
000016F6  223C 0000FF00            624          MOVE.L  #$FF00,D1   ; clears buffer
000016FC  700B                     625          MOVE.L  #11,D0
000016FE  4E4F                     626          TRAP    #15
00001700                           627  
00001700  4E75                     628          RTS
00001702                           629  
00001702                           630  
00001702                           631  DRAW_BACKGROUND
00001702                           632          ; sets the pen and fill to blue
00001702  223C 00FF0000            633          MOVE.L  #BLUE,D1
00001708  303C 0050                634          MOVE.W  #80,D0
0000170C  4E4F                     635          TRAP    #15
0000170E  303C 0051                636          MOVE.W  #81,D0
00001712  4E4F                     637          TRAP    #15
00001714                           638          
00001714  363C 0005                639          MOVE.W  #MARKER_SIZE,D3
00001718  383C 0005                640          MOVE.W  #MARKER_SIZE,D4
0000171C                           641  
0000171C                           642          ; loops over x and y
0000171C                           643          FOR D5 = #0 TO #NUMBER_OF_BOXES-1  DO
00001724                           644              FOR D6 = #0 TO #NUMBER_OF_BOXES-1  DO
0000172C  43F9 00001910            645                  LEA     grid_x_positions,A1
00001732  D2C5                     646                  ADD.W   D5,A1
00001734  D2C5                     647                  ADD.W   D5,A1
00001736  31D1 0100                648                  MOVE.W  (A1),$100
0000173A                           649  
0000173A  43F9 00001920            650                  LEA     grid_y_positions,A1
00001740  D2C6                     651                  ADD.W   D6,A1
00001742  D2C6                     652                  ADD.W   D6,A1
00001744  31D1 0102                653                  MOVE.W  (A1),$102
00001748                           654                  
00001748  41F8 0100                655                  LEA     $100,A0
0000174C                           656                  IF.W goal_index <EQ> D5 THEN
00001756                           657                      IF.W goal_index+2 <EQ> D6   THEN
00001760  223C 00FFFFFF            658                          MOVE.L  #WHITE,D1   ; change colour to white
00001766  303C 0050                659                          MOVE.W  #80,D0
0000176A  4E4F                     660                          TRAP    #15
0000176C  303C 0051                661                          MOVE.W  #81,D0
00001770  4E4F                     662                          TRAP    #15
00001772                           663                          
00001772  6100 00FE                664                          BSR     DRAW_SQUARE
00001776                           665                          
00001776  223C 00FF0000            666                          MOVE.L  #BLUE,D1   ; change colour back to blue
0000177C  303C 0050                667                          MOVE.W  #80,D0
00001780  4E4F                     668                          TRAP    #15
00001782  303C 0051                669                          MOVE.W  #81,D0
00001786  4E4F                     670                          TRAP    #15
00001788                           671                      ELSE
0000178C  6100 00E4                672                          BSR     DRAW_SQUARE
00001790                           673                      ENDI
00001790                           674                  ELSE
00001794  6100 00DC                675                      BSR     DRAW_SQUARE
00001798                           676                  ENDI
00001798                           677              ENDF
000017A0                           678          ENDF
000017AA                           679  
000017AA  4E75                     680          RTS
000017AC                           681  
000017AC                           682  
000017AC                           683  DRAW_OBJECTS
000017AC  41F9 000019D0            684          LEA     notes_colours,A0
000017B2  43F9 00001930            685          LEA     notes_x_positions,A1
000017B8  45F9 00001970            686          LEA     notes_y_positions,A2
000017BE  47F9 000019B0            687          LEA     notes_directions,A3
000017C4                           688          FOR D5 = #0 TO #NUMBER_OF_OBJECTS-1 DO
000017CC                           689              IF.B (A3) <NE> #$FF THEN
000017D4                           690                  ; sets the note colour
000017D4  303C 0050                691                  MOVE.W  #80,D0
000017D8  2210                     692                  MOVE.L  (A0),D1
000017DA  4E4F                     693                  TRAP    #15
000017DC  303C 0051                694                  MOVE.W  #81,D0
000017E0  4E4F                     695                  TRAP    #15
000017E2                           696  
000017E2  3211                     697                  MOVE.W  (A1),D1
000017E4  3412                     698                  MOVE.W  (A2),D2
000017E6  3601                     699                  MOVE.W  D1,D3
000017E8  3802                     700                  MOVE.W  D2,D4
000017EA  0643 000A                701                  ADD.W   #OBJECTS_SIZE,D3
000017EE  0644 000A                702                  ADD.W   #OBJECTS_SIZE,D4
000017F2  303C 005B                703                  MOVE.W  #91,D0
000017F6  4E4F                     704                  TRAP    #15
000017F8                           705  
000017F8                           706              ENDI
000017F8  5848                     707              ADD.W   #$4,A0
000017FA  5449                     708              ADD.W   #$2,A1
000017FC  544A                     709              ADD.W   #$2,A2
000017FE  524B                     710              ADD.W   #$1,A3
00001800                           711          ENDF
00001808                           712          
00001808  4E75                     713          RTS
0000180A                           714  
0000180A                           715  
0000180A                           716  
0000180A                           717  DRAW_PLAYER_1
0000180A                           718          ; sets the pen and fill to red
0000180A  303C 0050                719          MOVE.W  #80,D0
0000180E  223C 00808080            720          MOVE.L  #GREY,D1
00001814  4E4F                     721          TRAP    #15
00001816  303C 0051                722          MOVE.W  #81,D0
0000181A  4E4F                     723          TRAP    #15
0000181C                           724          
0000181C  41F9 000018F4            725          LEA     player_1_position,A0   ; refernce player variable
00001822  363C 000A                726          MOVE.W  #PLAYER_SIZE,D3
00001826  383C 000A                727          MOVE.W  #PLAYER_SIZE,D4
0000182A  6100 0046                728          BSR     DRAW_SQUARE
0000182E                           729          
0000182E                           730          ; sets the pen width to 3
0000182E  303C 005D                731          MOVE.W  #93,D0
00001832  323C 0003                732          MOVE.W  #3,D1
00001836  4E4F                     733          TRAP    #15
00001838                           734  
00001838                           735          ; draw the player shield
00001838  303C 0050                736          MOVE.W  #80,D0
0000183C  2239 000018FC            737          MOVE.L  player_1_shield_colour,D1
00001842  4E4F                     738          TRAP    #15
00001844                           739          
00001844  3239 000018F4            740          MOVE.W  player_1_position,D1
0000184A  3439 000018F6            741          MOVE.W  player_1_position+2,D2
00001850  5B41                     742          SUB.W   #5,D1
00001852  5B42                     743          SUB.W   #5,D2
00001854  3601                     744          MOVE.W  D1,D3
00001856  3802                     745          MOVE.W  D2,D4
00001858  0643 0014                746          ADD.W   #SHIELD_SIZE,D3
0000185C  0644 0014                747          ADD.W   #SHIELD_SIZE,D4
00001860                           748  
00001860  303C 005B                749          MOVE.W  #91,D0
00001864  4E4F                     750          TRAP    #15
00001866                           751          
00001866  303C 005D                752          MOVE.W  #93,D0
0000186A  323C 0001                753          MOVE.W  #1,D1
0000186E  4E4F                     754          TRAP    #15
00001870                           755  
00001870  4E75                     756          RTS
00001872                           757  
00001872                           758  ; draws a square at A0 plus size in D3,D4
00001872                           759  DRAW_SQUARE
00001872  3218                     760          MOVE.W  (A0)+,D1    ; set bounds of square to draw
00001874  3410                     761          MOVE.W  (A0),D2
00001876  D641                     762          ADD.W   D1,D3
00001878  D842                     763          ADD.W   D2,D4
0000187A                           764  
0000187A  303C 0057                765          MOVE.W  #87,D0
0000187E  4E4F                     766          TRAP    #15
00001880                           767          
00001880  9641                     768          SUB.W   D1,D3
00001882  9842                     769          SUB.W   D2,D4
00001884                           770  
00001884  4E75                     771          RTS
00001886                           772  
00001886                           773  
00001886                           774  GET_NEW_GOAL_POINT
00001886  363C 0008                775          MOVE.W  #NUMBER_OF_BOXES,D3
0000188A  6100 0014                776          BSR     GET_RANDOM_VALUE
0000188E  33C2 0000190C            777          MOVE.W  D2,goal_index       ; x value
00001894                           778  
00001894  6100 000A                779          BSR     GET_RANDOM_VALUE
00001898  33C2 0000190E            780          MOVE.W  D2,goal_index+2     ; y value
0000189E                           781  
0000189E  4E75                     782          RTS
000018A0                           783  
000018A0                           784  ; gets random number into D2.W
000018A0                           785  ; D3.W needs to have the range of numbers in it
000018A0                           786  GET_RANDOM_VALUE
000018A0  2039 00001908            787          MOVE.L  random_value,D0
000018A6  72AF                     788          MOVEQ   #$AF-$100,D1
000018A8  7412                     789          MOVEQ   #18,D2
000018AA                           790  NINC0
000018AA  D080                     791          ADD.L   D0,D0
000018AC  6400 0004                792          BCC     NINC1
000018B0  B300                     793          EOR.B   D1,D0
000018B2                           794  NINC1
000018B2  51CA FFF6                795          DBF     D2,NINC0
000018B6  23C0 00001908            796          MOVE.L  D0,random_value
000018BC  2400                     797          MOVE.L  D0,D2
000018BE                           798  
000018BE  6100 0006                799          BSR     DIVIDE_NUMBER
000018C2  4842                     800          SWAP    D2                  ; remainder is now in D2.W, i.e. the random number
000018C4  4E75                     801          RTS
000018C6                           802  
000018C6                           803  ; dividend in D2.L
000018C6                           804  ; divisor in D3.W
000018C6                           805  ; mask in D4.L
000018C6                           806  ; result in D2.L
000018C6                           807  DIVIDE_NUMBER
000018C6  3803                     808          MOVE.W  D3,D4
000018C8  5344                     809          SUB.W   #1,D4
000018CA  4844                     810          SWAP    D4
000018CC  383C FFFF                811          MOVE.W  #$FFFF,D4
000018D0                           812  
000018D0  C484                     813          AND.L   D4,D2          ; prevent overflow, FFFF plus n-1 on left side
000018D2  84C3                     814          DIVU    D3,D2              ; divide by number of values wanted
000018D4  4E75                     815          RTS
000018D6                           816  
000018D6                           817  
000018D6  303C 0009                818  DONE    MOVE.W  #9,D0
000018DA  4E4F                     819          TRAP    #15
000018DC                           820  
000018DC                           821  
000018DC                           822  last_frame_time         DS.L    1   ; stores the time at last frame
000018E0                           823  last_movement_time      DS.L    1   ; stores the time when last accepted input
000018E4                           824  last_goal_change_time   DS.L    1   ; stores the time when goal last changed
000018E8                           825  last_object_time        DS.L    1   ; stores the time when the notes where moved
000018EC                           826  last_note_spawn_time    DS.L    1   ; stores the time when note was last spawned
000018F0                           827  screen_dimensions       DS.W    2   ; stores screen size x,y
000018F4                           828  
000018F4                           829  player_1_position       DS.W    2       ; stores the top right player position x,y
000018F8= 57534144                 830  player_1_keymaps        DC.L    'WSAD'  ; stores the movement keys of player
000018FC= 000000FF                 831  player_1_shield_colour  DC.L    RED     ; stores the player shield colour that is active
00001900= 484E554A 494B4C00        832  player_1_colour_keymaps DC.L    'HNUJIKL' ; stores the keymaps for the player changing colours
00001908                           833  
00001908                           834  random_value            DS.L    1   ; stores a random variable
0000190C                           835  goal_index              DS.W    2   ; stores the index values of the goal square
00001910                           836  
00001910                           837  grid_x_positions        DS.W    NUMBER_OF_BOXES ; stores the positions of the markers
00001920                           838  grid_y_positions        DS.W    NUMBER_OF_BOXES ; stores the positions of the markers
00001930                           839  
00001930                           840  notes_x_positions       DS.W    NUMBER_OF_OBJECTS  ; stores the notes x positions
00001970                           841  notes_y_positions       DS.W    NUMBER_OF_OBJECTS  ; atores the notes y positions
000019B0                           842  notes_directions        DS.B    NUMBER_OF_OBJECTS  ; stores the notes directions, 0x <-, 1x ^, 2x ->, 3x v
000019D0                           843  notes_colours           DS.L    NUMBER_OF_OBJECTS  ; stores the notes colours
00001A50                           844  
00001A50                           845  note_time_to_spawn      DS.W    1   ; stores the time to spawn the next note
00001A52                           846  song_file_name          DS.B    16  ; stores the name of the song file to be played
00001A62                           847  
00001A62                           848  ; THE PROGRAM MUST NOT USE THIS MEMORY
00001A62                           849  ; data structure is
00001A62                           850  ; 4 bit number represents each line for that quarter beat
00001A62                           851  ; 0 rest, 1 1/4, 2 1/2, 3 1/1, 4 1.5/1, 5 2/1, 6 3/1, 7 4/1
00001A62                           852  ; last bit represents, 0 normal, 1 sharp note
00001A62                           853  ; 4 bits * 16 lines gives 64 bits or 8 bytes ber quarter beat
00001A62  =00003000                854  SONG_FILE_CONTENTS      EQU     $3000   ; stores the data for the song file
00001A62                           855  
00001A62                           856  
00001A62                           857  ; COLOURS
00001A62  =00000000                858  BLACK       EQU     $00000000
00001A62  =00000080                859  MAROON      EQU     $00000080
00001A62  =00008000                860  GREEN       EQU     $00008000
00001A62  =00008080                861  OLIVE       EQU     $00008080
00001A62  =00800000                862  NAVY        EQU     $00800000
00001A62  =00800080                863  PURPLE      EQU     $00800080
00001A62  =00808000                864  TEAL        EQU     $00808000
00001A62  =00808080                865  GREY        EQU     $00808080
00001A62  =000000FF                866  RED         EQU     $000000FF
00001A62  =0000FF00                867  LIME        EQU     $0000FF00
00001A62  =0000FFFF                868  YELLOW      EQU     $0000FFFF
00001A62  =00FF0000                869  BLUE        EQU     $00FF0000
00001A62  =00FF00FF                870  FUCHSIA     EQU     $00FF00FF
00001A62  =00FFFF00                871  AQUA        EQU     $00FFFF00
00001A62  =00C0C0C0                872  LITEGREY    EQU     $00C0C0C0
00001A62  =00FFFFFF                873  WHITE       EQU     $00FFFFFF
00001A62                           874  
00001A62                           875  
00001A62                           876      END     START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AQUA                FFFF00
BLACK               0
BLUE                FF0000
CALCULATE_GRID      10B2
CHECK_OBJECT_COLLISIONS  161E
CHECK_OUT_OF_BOUNDS  15D8
CHECK_Y             16A0
DIVIDE_NUMBER       18C6
DONE                18D6
DRAW_BACKGROUND     1702
DRAW_OBJECTS        17AC
DRAW_PLAYER_1       180A
DRAW_SQUARE         1872
FRAME_DELAY         120A
FUCHSIA             FF00FF
GET_NEW_GOAL_POINT  1886
GET_RANDOM_VALUE    18A0
GOAL_INDEX          190C
GREEN               8000
GREY                808080
GRID_X_POSITIONS    1910
GRID_Y_POSITIONS    1920
HANDLE_INPUT        122C
HANDLE_MOVEMENT     12E0
LAST_FRAME_TIME     18DC
LAST_GOAL_CHANGE_TIME  18E4
LAST_MOVEMENT_TIME  18E0
LAST_NOTE_SPAWN_TIME  18EC
LAST_OBJECT_TIME    18E8
LIME                FF00
LITEGREY            C0C0C0
LOAD_DATA           1140
LOOP                1162
MARKER_SIZE         5
MAROON              80
MOVE_OBJECTS        1538
NAVY                800000
NINC0               18AA
NINC1               18B2
NOTES_COLOURS       19D0
NOTES_DIRECTIONS    19B0
NOTES_X_POSITIONS   1930
NOTES_Y_POSITIONS   1970
NOTE_TIME_TO_SPAWN  1A50
NUMBER_OF_BOXES     8
NUMBER_OF_OBJECTS   20
OBJECTS_SIZE        A
OBJECT_OUT_OF_BOUNDS  1596
OLIVE               8080
PLAYER_1_COLOUR_KEYMAPS  1900
PLAYER_1_KEYMAPS    18F8
PLAYER_1_POSITION   18F4
PLAYER_1_SHIELD_COLOUR  18FC
PLAYER_SIZE         A
PURPLE              800080
RANDOM_VALUE        1908
RED                 FF
RENDER_SCREEN       16E6
SCREEN_DIMENSIONS   18F0
SHIELD_SIZE         14
SONG_FILE_CONTENTS  3000
SONG_FILE_NAME      1A52
SPAWN_NEW_OBJECT    13E2
START               1000
TEAL                808000
WHITE               FFFFFF
YELLOW              FFFF
_00000000           118C
_00000001           11B2
_00000002           11DC
_00000003           1202
_00000004           128E
_00000005           1254
_00000006           1266
_00000007           1278
_00000008           128A
_00000009           12DA
_0000000A           12DA
_0000000B           12B6
_0000000C           12C8
_0000000D           12DA
_0000000E           12F8
_0000000F           132C
_00000010           1322
_00000011           131E
_00000012           132C
_00000013           132C
_00000014           135C
_00000015           1350
_00000016           134C
_00000017           135C
_00000018           135C
_00000019           138C
_0000001A           1382
_0000001B           137E
_0000001C           138C
_0000001D           138C
_0000001E           13BC
_0000001F           13B0
_00000020           13AC
_00000021           13BC
_00000022           13BC
_00000023           13D0
_00000024           1524
_00000025           1444
_00000026           1452
_00000027           1460
_00000028           146E
_00000029           147C
_0000002A           148A
_0000002B           1498
_0000002C           14BA
_0000002D           14B6
_0000002E           14C8
_0000002F           14C8
_00000030           14EA
_00000031           14FE
_00000032           1510
_00000033           1522
_00000034           1586
_00000035           1564
_00000036           156E
_00000037           1578
_00000038           1582
_00000039           15A4
_0000003A           15B2
_0000003B           15C4
_0000003C           15D6
_0000003D           15E4
_0000003E           15F2
_0000003F           1612
_00000040           161C
_00000041           168E
_00000042           167E
_00000043           168E
_00000044           168E
_00000045           16C8
_00000046           16C4
_00000047           16E4
_00000048           16E4
_00000049           16E4
_0000004A           1794
_0000004B           178C
_0000004C           1790
_0000004D           1798
_0000004E           17F8
_20000000           10DA
_20000001           10F2
_20000002           1120
_20000003           1138
_20000004           1426
_20000005           152E
_20000006           1552
_20000007           158E
_20000008           165A
_20000009           1698
_2000000A           1724
_2000000B           17A2
_2000000C           172C
_2000000D           179A
_2000000E           17CC
_2000000F           1802
